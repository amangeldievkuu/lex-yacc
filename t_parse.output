Terminals which are not used

   lWRITE
   lREAD
   lLE
   lGE
   lLT
   lGT
   lNEQ
   lEQU
   lSTRING
   lELSE
   lSEMI


Grammar

    0 $accept: prog $end

    1 prog: mthdcls
    2     | /* empty */

    3 mthdcls: mthdcl mthdcls
    4        | mthdcl

    5 type: lINT
    6     | lREAL

    7 mthdcl: type lMAIN lID lLP formals lRP block
    8       | type lID lLP formals lRP block

    9 formals: formal oformal
   10        | /* empty */

   11 formal: type lID

   12 oformal: lCOMMA formal oformal
   13        | /* empty */

   14 stmts: stmt stmts
   15      | stmt

   16 stmt: lIF expr lBEGIN stmts lEND
   17     | lASSIGN lID '=' expr
   18     | lRETURN expr
   19     | block

   20 block: lBEGIN stmts lEND

   21 expr: expr lADD expr
   22     | expr lMINUS expr
   23     | expr lTIMES expr
   24     | expr lDIVIDE expr
   25     | lLP expr lRP
   26     | lID
   27     | lINUM
   28     | lRNUM
   29     | lQSTR


Terminals, with rules where they appear

$end (0) 0
'=' (61) 17
error (256)
lWRITE (258)
lREAD (259)
lIF (260) 16
lASSIGN (261) 17
lRETURN (262) 18
lBEGIN (263) 16 20
lEND (264) 16 20
lLE (265)
lGE (266)
lLT (267)
lGT (268)
lNEQ (269)
lEQU (270)
lMINUS (271) 22
lADD (272) 21
lDIVIDE (273) 24
lTIMES (274) 23
lLP (275) 7 8 25
lRP (276) 7 8 25
lINT (277) 5
lREAL (278) 6
lSTRING (279)
lELSE (280)
lMAIN (281) 7
lSEMI (282)
lCOMMA (283) 12
lID (284) 7 8 11 17 26
lINUM (285) 27
lRNUM (286) 28
lQSTR (287) 29


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
prog (35)
    on left: 1 2, on right: 0
mthdcls (36)
    on left: 3 4, on right: 1 3
type (37)
    on left: 5 6, on right: 7 8 11
mthdcl (38)
    on left: 7 8, on right: 3 4
formals (39)
    on left: 9 10, on right: 7 8
formal (40)
    on left: 11, on right: 9 12
oformal (41)
    on left: 12 13, on right: 9 12
stmts (42)
    on left: 14 15, on right: 14 16 20
stmt (43)
    on left: 16 17 18 19, on right: 14 15
block (44)
    on left: 20, on right: 7 8 19
expr (45)
    on left: 21 22 23 24 25 26 27 28 29, on right: 16 17 18 21 22 23
    24 25


state 0

    0 $accept: . prog $end

    lINT   shift, and go to state 1
    lREAL  shift, and go to state 2

    $default  reduce using rule 2 (prog)

    prog     go to state 3
    mthdcls  go to state 4
    type     go to state 5
    mthdcl   go to state 6


state 1

    5 type: lINT .

    $default  reduce using rule 5 (type)


state 2

    6 type: lREAL .

    $default  reduce using rule 6 (type)


state 3

    0 $accept: prog . $end

    $end  shift, and go to state 7


state 4

    1 prog: mthdcls .

    $default  reduce using rule 1 (prog)


state 5

    7 mthdcl: type . lMAIN lID lLP formals lRP block
    8       | type . lID lLP formals lRP block

    lMAIN  shift, and go to state 8
    lID    shift, and go to state 9


state 6

    3 mthdcls: mthdcl . mthdcls
    4        | mthdcl .

    lINT   shift, and go to state 1
    lREAL  shift, and go to state 2

    $default  reduce using rule 4 (mthdcls)

    mthdcls  go to state 10
    type     go to state 5
    mthdcl   go to state 6


state 7

    0 $accept: prog $end .

    $default  accept


state 8

    7 mthdcl: type lMAIN . lID lLP formals lRP block

    lID  shift, and go to state 11


state 9

    8 mthdcl: type lID . lLP formals lRP block

    lLP  shift, and go to state 12


state 10

    3 mthdcls: mthdcl mthdcls .

    $default  reduce using rule 3 (mthdcls)


state 11

    7 mthdcl: type lMAIN lID . lLP formals lRP block

    lLP  shift, and go to state 13


state 12

    8 mthdcl: type lID lLP . formals lRP block

    lINT   shift, and go to state 1
    lREAL  shift, and go to state 2

    $default  reduce using rule 10 (formals)

    type     go to state 14
    formals  go to state 15
    formal   go to state 16


state 13

    7 mthdcl: type lMAIN lID lLP . formals lRP block

    lINT   shift, and go to state 1
    lREAL  shift, and go to state 2

    $default  reduce using rule 10 (formals)

    type     go to state 14
    formals  go to state 17
    formal   go to state 16


state 14

   11 formal: type . lID

    lID  shift, and go to state 18


state 15

    8 mthdcl: type lID lLP formals . lRP block

    lRP  shift, and go to state 19


state 16

    9 formals: formal . oformal

    lCOMMA  shift, and go to state 20

    $default  reduce using rule 13 (oformal)

    oformal  go to state 21


state 17

    7 mthdcl: type lMAIN lID lLP formals . lRP block

    lRP  shift, and go to state 22


state 18

   11 formal: type lID .

    $default  reduce using rule 11 (formal)


state 19

    8 mthdcl: type lID lLP formals lRP . block

    lBEGIN  shift, and go to state 23

    block  go to state 24


state 20

   12 oformal: lCOMMA . formal oformal

    lINT   shift, and go to state 1
    lREAL  shift, and go to state 2

    type    go to state 14
    formal  go to state 25


state 21

    9 formals: formal oformal .

    $default  reduce using rule 9 (formals)


state 22

    7 mthdcl: type lMAIN lID lLP formals lRP . block

    lBEGIN  shift, and go to state 23

    block  go to state 26


state 23

   20 block: lBEGIN . stmts lEND

    lIF      shift, and go to state 27
    lASSIGN  shift, and go to state 28
    lRETURN  shift, and go to state 29
    lBEGIN   shift, and go to state 23

    stmts  go to state 30
    stmt   go to state 31
    block  go to state 32


state 24

    8 mthdcl: type lID lLP formals lRP block .

    $default  reduce using rule 8 (mthdcl)


state 25

   12 oformal: lCOMMA formal . oformal

    lCOMMA  shift, and go to state 20

    $default  reduce using rule 13 (oformal)

    oformal  go to state 33


state 26

    7 mthdcl: type lMAIN lID lLP formals lRP block .

    $default  reduce using rule 7 (mthdcl)


state 27

   16 stmt: lIF . expr lBEGIN stmts lEND

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 39


state 28

   17 stmt: lASSIGN . lID '=' expr

    lID  shift, and go to state 40


state 29

   18 stmt: lRETURN . expr

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 41


state 30

   20 block: lBEGIN stmts . lEND

    lEND  shift, and go to state 42


state 31

   14 stmts: stmt . stmts
   15      | stmt .

    lIF      shift, and go to state 27
    lASSIGN  shift, and go to state 28
    lRETURN  shift, and go to state 29
    lBEGIN   shift, and go to state 23

    $default  reduce using rule 15 (stmts)

    stmts  go to state 43
    stmt   go to state 31
    block  go to state 32


state 32

   19 stmt: block .

    $default  reduce using rule 19 (stmt)


state 33

   12 oformal: lCOMMA formal oformal .

    $default  reduce using rule 12 (oformal)


state 34

   25 expr: lLP . expr lRP

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 44


state 35

   26 expr: lID .

    $default  reduce using rule 26 (expr)


state 36

   27 expr: lINUM .

    $default  reduce using rule 27 (expr)


state 37

   28 expr: lRNUM .

    $default  reduce using rule 28 (expr)


state 38

   29 expr: lQSTR .

    $default  reduce using rule 29 (expr)


state 39

   16 stmt: lIF expr . lBEGIN stmts lEND
   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr

    lBEGIN   shift, and go to state 45
    lMINUS   shift, and go to state 46
    lADD     shift, and go to state 47
    lDIVIDE  shift, and go to state 48
    lTIMES   shift, and go to state 49


state 40

   17 stmt: lASSIGN lID . '=' expr

    '='  shift, and go to state 50


state 41

   18 stmt: lRETURN expr .
   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr

    lMINUS   shift, and go to state 46
    lADD     shift, and go to state 47
    lDIVIDE  shift, and go to state 48
    lTIMES   shift, and go to state 49

    $default  reduce using rule 18 (stmt)


state 42

   20 block: lBEGIN stmts lEND .

    $default  reduce using rule 20 (block)


state 43

   14 stmts: stmt stmts .

    $default  reduce using rule 14 (stmts)


state 44

   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr
   25     | lLP expr . lRP

    lMINUS   shift, and go to state 46
    lADD     shift, and go to state 47
    lDIVIDE  shift, and go to state 48
    lTIMES   shift, and go to state 49
    lRP      shift, and go to state 51


state 45

   16 stmt: lIF expr lBEGIN . stmts lEND

    lIF      shift, and go to state 27
    lASSIGN  shift, and go to state 28
    lRETURN  shift, and go to state 29
    lBEGIN   shift, and go to state 23

    stmts  go to state 52
    stmt   go to state 31
    block  go to state 32


state 46

   22 expr: expr lMINUS . expr

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 53


state 47

   21 expr: expr lADD . expr

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 54


state 48

   24 expr: expr lDIVIDE . expr

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 55


state 49

   23 expr: expr lTIMES . expr

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 56


state 50

   17 stmt: lASSIGN lID '=' . expr

    lLP    shift, and go to state 34
    lID    shift, and go to state 35
    lINUM  shift, and go to state 36
    lRNUM  shift, and go to state 37
    lQSTR  shift, and go to state 38

    expr  go to state 57


state 51

   25 expr: lLP expr lRP .

    $default  reduce using rule 25 (expr)


state 52

   16 stmt: lIF expr lBEGIN stmts . lEND

    lEND  shift, and go to state 58


state 53

   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   22     | expr lMINUS expr .
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr

    lDIVIDE  shift, and go to state 48
    lTIMES   shift, and go to state 49

    $default  reduce using rule 22 (expr)


state 54

   21 expr: expr . lADD expr
   21     | expr lADD expr .
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr

    lDIVIDE  shift, and go to state 48
    lTIMES   shift, and go to state 49

    $default  reduce using rule 21 (expr)


state 55

   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr
   24     | expr lDIVIDE expr .

    $default  reduce using rule 24 (expr)


state 56

   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   23     | expr lTIMES expr .
   24     | expr . lDIVIDE expr

    $default  reduce using rule 23 (expr)


state 57

   17 stmt: lASSIGN lID '=' expr .
   21 expr: expr . lADD expr
   22     | expr . lMINUS expr
   23     | expr . lTIMES expr
   24     | expr . lDIVIDE expr

    lMINUS   shift, and go to state 46
    lADD     shift, and go to state 47
    lDIVIDE  shift, and go to state 48
    lTIMES   shift, and go to state 49

    $default  reduce using rule 17 (stmt)


state 58

   16 stmt: lIF expr lBEGIN stmts lEND .

    $default  reduce using rule 16 (stmt)
